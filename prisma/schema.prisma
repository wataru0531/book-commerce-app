// Prismaのセットアップ
// データベースクエリのクライアント(Prisma Client)の設定と、
// データベースのデータソースが定義されている
// データベースのテーブルや関連性、データモデルなどの定義がされる

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


// Prisma Clientの生成に関する設定を提供。JavaScript用のPrisma Clientが生成される
generator client {
  provider = "prisma-client-js"
}

// データベースのデータソースに関する設定を提供
// シャドウデータベース 本番データベースの複製であり、本番環境の不可や障害に備えて利用される
// プーリング  (言葉的には集めて「 保持 」)。データベース接続の管理方法。アプリケーションがデータベースに対して複数のクエリを効率的に実行するための仕組み
//          データベース接続はリソースが高い操作であり、都度都度接続を確立・切断するのは非効率です。そこで、コネクションプール（Connection Pool）が導入され、接続を再利用することで効率を向上させる  
//          NON_POOLINGなのでおそらくプーリングを行わず、その都度で確立確率・切断するように設定されている?

datasource db {
  provider = "postgresql"    // 使用するデータベースの種類
  url      = env("POSTGRES_PRISMA_URL")  // データベースへの接続に必要な情報が環境変数DATABASE_URL から取得されるように指定
  directUrl = env("POSTGRES_URL_NON_POOLING") // PostgreSQLデータベースへの直接の接続に使用される URL または文字列
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // シャドウデータベースへの接続に使用される URL または文字列
}


// モデルを定義
// 参考 https://authjs.dev/reference/adapter/prisma?_gl=1*1o905uy*_gcl_au*MjkyNTQzMzc3LjE3MDU2NzU1MTMuMTU2MzkyMzU2NS4xNzA2MTg5NDA2LjE3MDYxODk0MDU.

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  purchases Purchase[] // Purchaseと紐づける。リレーション。関連づける
}


// ユーザーが本を買ったかどうかの購入履歴
model Purchase {
  id String @id @default(cuid()) // デフォルトで割り当てられる
  userId String
  bookId String
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}